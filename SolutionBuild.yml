parameters:
- name: SolutionName
  displayName: Solution Name
  type: string
  default: 'SampleSolution'
- name: Managed
  displayName: Build Managed Solution?
  type: boolean
  default: true
- name: BuildDevEnvName
  displayName: Build Environment
  type: string
  default: 'Power-platform-Dev-Connection'
- name: BuildTestEnvName
  displayName: Build Environment
  type: string
  default: 'Power-Platform-Test-Connection'
- name: EnvName
  displayName: Build Environment
  type: string
  default: 'Power-Platform-Test-Connection'
trigger: none

variables:
  SolutionName: ${{ parameters.SolutionName }}
  BuildEnvSvcConn: ${{ parameters.EnvName }}

jobs:
- job: build
  displayName: Build
  pool:
    vmImage: windows-2019
  steps:
  - checkout: self

  - task: PowerPlatformToolInstaller@0
    displayName: 'Power Platform Tool Installer '

  - task: PowerPlatformPackSolution@0
    displayName: 'Power Platform Pack Solution '
    inputs:
      SolutionSourceFolder: '$(Build.SourcesDirectory)/$(SolutionName)'
      SolutionOutputFile: '$(Build.BinariesDirectory)/$(SolutionName).zip'

  - task: PowerPlatformChecker@0
    displayName: 'Power Platform Checker '
    inputs:
      PowerPlatformSPN: $(BuildTestEnvSvcConn)
      FilesToAnalyze: '$(Build.BinariesDirectory)/$(SolutionName).zip '
      RuleSet: 0ad12346-e108-40b8-a956-9a8f95ea18c9

  - task: PowerPlatformBackupEnvironment@0
    displayName: 'Power Platform Backup Environment '
    inputs:
      authenticationType: PowerPlatformSPN
      PowerPlatformSPN: $(BuildDevEnvSvcConn)

  - task: PowerPlatformImportSolution@0
    displayName: 'Power Platform Import Solution '
    inputs:
      authenticationType: PowerPlatformSPN
      PowerPlatformSPN: $(BuildTestEnvName)
      SolutionInputFile: '$(Build.BinariesDirectory)/$(SolutionName).zip '

  - task: PowerPlatformPublishCustomizations@0
    displayName: 'Power Platform Publish Customizations '
    inputs:
      authenticationType: PowerPlatformSPN
      PowerPlatformSPN: $(BuildTestEnvName)

  - task: PowerPlatformExportSolution@0
    displayName: 'Power Platform Export Solution '
    inputs:
      authenticationType: PowerPlatformSPN
      PowerPlatformSPN: $(BuildTestEnvName)
      SolutionName: $(SolutionName)
      SolutionOutputFile: '$(Build.ArtifactStagingDirectory)/$(SolutionName).zip '
      Managed: ${{ parameters.Managed }}
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
